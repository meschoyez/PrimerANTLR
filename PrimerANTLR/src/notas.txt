Reglas Expresion Regular ANTLR

Selección     -> a | b
Concatenación -> a b
Agrupación    -> a (b | c)

Repetición -> *  cero o más veces
           -> +  una o más veces

Al menos una vez -> ? cero o una vez

Comodín -> . cualquier caracter excepto " "

Selección  -> []
Secuencia  -> [a-b] -> [-+*/]
Negación   -> [^a]

-------------------

25Ago

Tarea -> Dado un archivo con formato

    DD/MM/YYYY HH:mm:ss ID

Formato de hora: 24 horas

Definir Expresiones Regulares para encontrar las líneas
que contienen (al estilo de grep):
 a- Meses pares
 b- Dias del mes entre 10 y el 19
 c- Años entre 1998 y 2008
 d- Hora entre las 11:30 y las 20:45


-------------

Análisis sintáctico

   -> La árbol vuela -> Artículo Sustantivo Verbo -> Ok(a nivel sintáctico)

ParseTree se muestra como texto y sirve de entrada al programa "dot" (graphviz)

Análisis sintáctico descendente
(token == lexema == literal)

Implementa dos acciones:
 1- Derivar
 2- Match

si : s ; // simbolo inicial
s : '(' s ')' s
  |
  ;

Entrada -> (())()

  Reglas        Entrada  Accion
 1 $ si         (())() $ Derivar
 2 $ s          (())() $ Derivar
 3 $ s ) s (    (())() $ Match
 4 $ s ) s       ())() $ Derivar
 5 $ s ) s ) s ( ())() $ Match
 6 $ s ) s ) s    ))() $ Derivar
 7 $ s ) s )      ))() $ Match
 8 $ s ) s         )() $ Derivar
 9 $ s )           )() $ Match
10 $ s              () $ Derivar
11 $ s ) s (        () $ Match
12 $ s ) s           ) $ Derivar
13 $ s )             ) $ Match
14 $ s                 $ Derivar
15 $                   $ OK

            si
            |
            s 
        /  /  \   \
       (   s   )   s
         / /\ \    | \ \ \
        (  s ) s   (  s ) s
           |   |      |   |
           

Entrada -> ())

   Reglas        Entrada  Accion
 1 $ si            ()) $ Derivar
 2 $ s             ()) $ Derivar
 3 $ s ) s (       ()) $ Match
 4 $ s ) s          )) $ Derivar
 5 $ s )            )) $ Match
 6 $ s               ) $ Derivar
 7 $                 ) $ ERROR

             si
            |
            s 
       /   /  \   \
       (   s   )   s
           |       |      )


Entrada -> (()

   Reglas        Entrada  Accion
 1 $ si            (() $ Derivar
 2 $ s             (() $ Derivar
 3 $ s ) s (       (() $ Match
 4 $ s ) s          () $ Derivar
 5 $ s ) s ) s (    () $ Match
 6 $ s ) s ) s       ) $ Derivar
 7 $ s ) s )         ) $ Match
 8 $ s ) s             $ Derivar
 9 $ s )               $ ERROR


             si
            |
            s 
       /   /  \   \
       (   s   )   s
           |     / /
                (  s 
                

=========================

Análisis sintáctico ascendente

Implementa dos acciones:
 1- Desplazar
 2- Reducir

si : s ; // simbolo inicial
s : '(' s ')' s
  |
  ;

Entrada -> (())()

   Reglas        Entrada  Accion
 1 $            (())() $ Desplazar
 2 $ (           ())() $ Desplazar
 3 $ ((           ))() $ Reducir
 4 $ ( ( s        ))() $ Desplazar
 5 $ ( ( s )       )() $ Reducir
 6 $ ( ( s ) s     )() $ Reducir
 7 $ ( s           )() $ Desplazar
 8 $ ( s )          () $ Desplazar
 9 $ ( s ) (         ) $ Reducir
10 $ ( s ) ( s       ) $ Desplazar
11 $ ( s ) ( s )       $ Reducir
12 $ ( s ) ( s ) s     $ Reducir
13 $ ( s ) s           $ Reducir
14 $ s                 $ Reducir
15 $ si                $ OK

     si
     |
     s________
    /|  \     \
   / s   \     s
  / /|\\  \   /|\\
 ( ( s ) s ) ( s ) s
     |         |


-----

Entrada -> ())

   Reglas        Entrada  Accion
 1 $               ()) $ Desplazar
 2 $ (              )) $ Reducir
 3 $ ( s            )) $ Desplazar
 4 $ ( s )           ) $ Reducir
 5 $ ( s ) s         ) $ Reducir
 6 $ s               ) $ Reducir
 6 $ si              ) $ ERROR

------

Entrada -> (()

   Reglas        Entrada  Accion
 1 $               (() $ Desplazar
 2 $ (              () $ Desplazar
 3 $ ( (             ) $ Reducir
 4 $ ( ( s           ) $ Desplazar
 5 $ ( ( s )           $ Reducir
 6 $ ( ( s ) s         $ Reducir
 7 $ ( s               $ Reducir
 8 $ ( si              $ ERROR


----

Actividad: Reglas gramaticales para una entrada como la siguiente:

int x ;        // 3 tokens
int y_2 = 43 ; // 5 tokens
int zyx = x ;  // 5 tokens

Ayuda -> Un programa es una secuencia de instrucciones

simbolo inicial -> programa

programa : instrucciones EOF ;

instrucciones : instruccion instrucciones
              |
              ;

instruccion : declaracion ;

-------------

Actividad: Construir (intentar) las reglas para las estructuras de control if y for.

Desafío: abordar las operaciones aritmético lógicas

-------------

Tabla de símbolos

Recolectar ID usados en el código fuente
   |--> Diccionario --> Map

Acciones a implementar:
 - Agregar ID
 - Buscar ID

Valores asociados a un ID:
 - Tipo variable (o constante)
  + ID 
  + tipo dato (int, char, double, void)
  + usada
  + inicializada

 - Tipo función
  + ID 
  + tipo dato devuelto (int, char, double, void)
  + usada
  + inicializada
  + argumentos


Actividad: Implementar la tabla de símbolos

----------------------------
03 noviembre

Codigo Intermedio (independiente del HW)

Código de direcciones --> representar el programa en un lenguaje simple
                          en el cual se utilizan _hasta_ 3 direcciones de 
                          memoria

  Formato base es --> x = y op z

  Ejemplos:
           x = y + z
           x = y - 6
           x = 8

Definir etiquetas --> lbl e1
Saltos a instrucciones --> jmp e1

Necesito:
 - Generador de variables temporales -> t<nro>
 - Generador de etiquetas -> e<nro>

Para implementar funciones, utilizamos el stach accediendo mediante push y pop.

Ejemplos de traducción:

(1)
<<entrada>>
int x = 0;
int y = 5;

x = y / 5 + y * 10;

<<tac>>
x = 0
y = 5
t0 = y / 5
t1 = y * 10
t2 = t0 + t1
x = t2

(2)
<<entrada>>
if (x > 0)
  y = z * 9 - f;
else
  y = z * 9 + g;

<<tac>>
t0 = x > 0
beqz t0 to e0
t1 = z * 9
t2 = t1 - f
y = t2
jmp e1
lbl e0
t3 = z * 9
t4 = t3 + g
y = t4
lbl e1

(3)
<<entrada>>
for (x = 0; x < 10; x++)
  y = z * x;

<<tac>>
x = 0
lbl e0
t0 = x < 10
beqz t0 to e1
y = z * x
x = x + 1
jmp e0
lbl e1


(4)
<<entrada>>
int calcular (int x, int y) {
  return x + y;
}
...
  z = calcular(x, y);

<<tac>>
lbl e0
pop e1
pop y
pop x
t0 = x + y
push t0
jmp e1

...

push x
push y
push e2
jmp e0
lbl e2
pop z

------

Optimizaciones simples independientes del HW
 - Propagacion de constantes
 - Quitar variables innecesarias

<<tac>>
x = 0
y = 5
t0 = y / 5
t1 = y * 10
t2 = t0 + t1
x = t2

<<tac_1>>
x = 0
y = 5
t0 = 5 / 5
t1 = 5 * 10
x = t0 + t1

<<tac_2>>
x = 0
y = 5
t0 = 1
t1 = 50
x = t0 + t1

<<tac_3>>
x = 0
y = 5
x = 1 + 50

<<tac_4>>
x = 0
y = 5
x = 51

<<tac_5>>
x = 51
y = 5

Otro ejemplo
<<tac>>
t0 = x > 0
beqz t0 to e0
t1 = z * 9
t2 = t1 - f
y = t2
jmp e1
lbl e0
t3 = z * 9
t4 = t3 + g
y = t4
lbl e1

<<tac_1>>
t0 = x > 0
t1 = z * 9
beqz t0 to e0
y = t1 - f
jmp e1
lbl e0
y = t1 + g
lbl e1

