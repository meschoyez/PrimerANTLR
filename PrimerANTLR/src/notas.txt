Reglas Expresion Regular ANTLR

Selección     -> a | b
Concatenación -> a b
Agrupación    -> a (b | c)

Repetición -> *  cero o más veces
           -> +  una o más veces

Al menos una vez -> ? cero o una vez

Comodín -> . cualquier caracter excepto " "

Selección  -> []
Secuencia  -> [a-b] -> [-+*/]
Negación   -> [^a]

-------------------

25Ago

Tarea -> Dado un archivo con formato

    DD/MM/YYYY HH:mm:ss ID

Formato de hora: 24 horas

Definir Expresiones Regulares para encontrar las líneas
que contienen (al estilo de grep):
 a- Meses pares
 b- Dias del mes entre 10 y el 19
 c- Años entre 1998 y 2008
 d- Hora entre las 11:30 y las 20:45


-------------

Análisis sintáctico

   -> La árbol vuela -> Artículo Sustantivo Verbo -> Ok(a nivel sintáctico)

ParseTree se muestra como texto y sirve de entrada al programa "dot" (graphviz)

Análisis sintáctico descendente
(token == lexema == literal)

Implementa dos acciones:
 1- Derivar
 2- Match

si : s ; // simbolo inicial
s : '(' s ')' s
  |
  ;

Entrada -> (())()

  Reglas        Entrada  Accion
 1 $ si         (())() $ Derivar
 2 $ s          (())() $ Derivar
 3 $ s ) s (    (())() $ Match
 4 $ s ) s       ())() $ Derivar
 5 $ s ) s ) s ( ())() $ Match
 6 $ s ) s ) s    ))() $ Derivar
 7 $ s ) s )      ))() $ Match
 8 $ s ) s         )() $ Derivar
 9 $ s )           )() $ Match
10 $ s              () $ Derivar
11 $ s ) s (        () $ Match
12 $ s ) s           ) $ Derivar
13 $ s )             ) $ Match
14 $ s                 $ Derivar
15 $                   $ OK

            si
            |
            s 
        /  /  \   \
       (   s   )   s
         / /\ \    | \ \ \
        (  s ) s   (  s ) s
           |   |      |   |
           

Entrada -> ())

   Reglas        Entrada  Accion
 1 $ si            ()) $ Derivar
 2 $ s             ()) $ Derivar
 3 $ s ) s (       ()) $ Match
 4 $ s ) s          )) $ Derivar
 5 $ s )            )) $ Match
 6 $ s               ) $ Derivar
 7 $                 ) $ ERROR

             si
            |
            s 
       /   /  \   \
       (   s   )   s
           |       |      )


Entrada -> (()

   Reglas        Entrada  Accion
 1 $ si            (() $ Derivar
 2 $ s             (() $ Derivar
 3 $ s ) s (       (() $ Match
 4 $ s ) s          () $ Derivar
 5 $ s ) s ) s (    () $ Match
 6 $ s ) s ) s       ) $ Derivar
 7 $ s ) s )         ) $ Match
 8 $ s ) s             $ Derivar
 9 $ s )               $ ERROR


             si
            |
            s 
       /   /  \   \
       (   s   )   s
           |     / /
                (  s 
                

=========================

Análisis sintáctico ascendente

Implementa dos acciones:
 1- Desplazar
 2- Reducir

si : s ; // simbolo inicial
s : '(' s ')' s
  |
  ;

Entrada -> (())()

   Reglas        Entrada  Accion
 1 $            (())() $ Desplazar
 2 $ (           ())() $ Desplazar
 3 $ ((           ))() $ Reducir
 4 $ ( ( s        ))() $ Desplazar
 5 $ ( ( s )       )() $ Reducir
 6 $ ( ( s ) s     )() $ Reducir
 7 $ ( s           )() $ Desplazar
 8 $ ( s )          () $ Desplazar
 9 $ ( s ) (         ) $ Reducir
10 $ ( s ) ( s       ) $ Desplazar
11 $ ( s ) ( s )       $ Reducir
12 $ ( s ) ( s ) s     $ Reducir
13 $ ( s ) s           $ Reducir
14 $ s                 $ Reducir
15 $ si                $ OK

     si
     |
     s________
    /|  \     \
   / s   \     s
  / /|\\  \   /|\\
 ( ( s ) s ) ( s ) s
     |         |


-----

Entrada -> ())

   Reglas        Entrada  Accion
 1 $               ()) $ Desplazar
 2 $ (              )) $ Reducir
 3 $ ( s            )) $ Desplazar
 4 $ ( s )           ) $ Reducir
 5 $ ( s ) s         ) $ Reducir
 6 $ s               ) $ Reducir
 6 $ si              ) $ ERROR

------

Entrada -> (()

   Reglas        Entrada  Accion
 1 $               (() $ Desplazar
 2 $ (              () $ Desplazar
 3 $ ( (             ) $ Reducir
 4 $ ( ( s           ) $ Desplazar
 5 $ ( ( s )           $ Reducir
 6 $ ( ( s ) s         $ Reducir
 7 $ ( s               $ Reducir
 8 $ ( si              $ ERROR


----

Actividad: Reglas gramaticales para una entrada como la siguiente:

int x ;        // 3 tokens
int y_2 = 43 ; // 5 tokens
int zyx = x ;  // 5 tokens

Ayuda -> Un programa es una secuencia de instrucciones

simbolo inicial -> programa

programa : instrucciones EOF ;

instrucciones : instruccion instrucciones
              |
              ;

instruccion : declaracion ;

-------------

Actividad: Construir (intentar) las reglas para las estructuras de control if y for.

Desafío: abordar las operaciones aritmético lógicas

-------------

Tabla de símbolos

Recolectar ID usados en el código fuente
   |--> Diccionario --> Map

Acciones a implementar:
 - Agregar ID
 - Buscar ID

Valores asociados a un ID:
 - Tipo variable (o constante)
  + ID 
  + tipo dato (int, char, double, void)
  + usada
  + inicializada

 - Tipo función
  + ID 
  + tipo dato devuelto (int, char, double, void)
  + usada
  + inicializada
  + argumentos


Actividad: Implementar la tabla de símbolos
